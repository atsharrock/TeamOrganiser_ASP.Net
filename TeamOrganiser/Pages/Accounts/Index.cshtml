@page
@model TeamOrganiser.IndexAccountsModel

@{
    ViewData["Title"] = "Accounts";
}

<h1 class="display-4" style="padding-left: 10px;">Accounts</h1>

<medium class="text-muted" style="padding-left: 10px;">
    Manage accounts. Add another manager or coach.
</medium>

<div>
    <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#createModal" style="margin: 10px;">
        Create New
    </button>
</div>

<table class="table table-striped table-bordered" id="table_useraccount">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.UserAccount[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserAccount[0].Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserAccount[0].AccountType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserAccount[0].Password)
            </th>
            <th>
                Actions
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.UserAccount)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AccountType)
                </td>
                <td>
                    ******
                </td>
                <td>
                    <button type="button" class="btn btn-info" data-toggle="modal" data-target="#editModal" onclick="loadEdit(@item.ID)">Edit</button>
                    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#deleteModal" onclick="loadDelete(@item.ID)">Delete</button>
                </td>
            </tr>
        }

    </tbody>
</table>

@await Html.PartialAsync("~/Pages/Shared/_SuccessModal.cshtml")
@await Html.PartialAsync("~/Pages/Shared/_ErrorModal.cshtml")
@await Html.PartialAsync("~/Pages/Accounts/_DeleteWarningModal.cshtml")
@await Html.PartialAsync("~/Pages/Accounts/_CreateFormModal.cshtml")
@await Html.PartialAsync("~/Pages/Accounts/_EditFormModal.cshtml")

@section scripts{
    <script>

        function createModal() {
            $.post('Accounts/Create', $('#createForm').serialize(), function (data) {
                $('#createModal').modal('toggle');
                if (data.substring(0, 5) != "Error") {
                    $('#successModalMessage').text(data);
                    $('#success_tic').modal('toggle');

                    setTimeout(function () {
                        location.reload();
                    }, 2000);
                }
                else {
                    $('#errorModalMessage').text(data);
                    $('#errorModal').modal('toggle');
                }

            });
        }

        function loadEdit(id) {
            $.getJSON("Accounts/Edit", { id: id }, function (data) {
                $('#inputEditID').val(id);
                $('#inputEditName').val(data.name);
                $('#inputEditEmail').val(data.email);
                $('#inputEditPassword').val(data.password);
                $('#inputEditAccount').val(data.accountType);
            })
                .fail(function (xhr, status, error) {
                    var errorMessage = xhr.status + ': ' + xhr.statusText
                    console.log('Error - ' + errorMessage);
                })
        }

        function editModel() {
            $.post('Accounts/Edit', $('#editForm').serialize(), function (data) {
                $('#editModal').modal('toggle');
                if (data.substring(0, 5) !== "Error") {
                    $('#successModalMessage').text(data);
                    $('#success_tic').modal('toggle');

                    setTimeout(function () {
                        location.reload();
                    }, 2000);
                }
                else {
                    $('#errorModalMessage').text(data);
                    $('#errorModal').modal('toggle');
                }

            });
        }

        function loadDelete(id) {
            $.getJSON("Accounts/Edit", { id: id }, function (data) {
                event.preventDefault();
                $('#deleteWarningMsge').text("Are you sure you want to delete " + data.name + "? This action cannot be undone");
                $('#deleteModalButton').attr('onClick', 'deleteModal(' + id + ')');
            })
                .fail(function (xhr, status, error) {
                    var errorMessage = xhr.status + ': ' + xhr.statusText
                    console.log('Error - ' + errorMessage);
                })
        }

        function deleteModal(id) {
            $.post("Accounts/Delete", { id: id, __RequestVerificationToken: gettoken() }, function (data) {
                if (data.substring(0, 5) != "Error") {
                    $('#deleteModal').modal('toggle');
                    $('#successModalMessage').text(data);
                    $('#success_tic').modal('toggle');

                    setTimeout(function () {
                        location.reload();
                    }, 2000);
                }
                else {
                    $('#errorModalMessage').text(data);
                    $('#errorModal').modal('toggle');
                }

            })
                .fail(function (xhr, status, error) {
                    var errorMessage = xhr.status + ': ' + xhr.statusText;
                    console.log('Error - ' + errorMessage);
                })
        }

        $(document).ready(function () {
            $('#table_useraccount').dataTable();
        });

        function gettoken() {
            var token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }

    </script>
}



